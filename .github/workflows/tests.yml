name: CI/CD
on:
  push:
    branches:
      - master
    tags:
      - "*"
jobs:
  tests:
    runs-on: ubuntu-latest
    name: Tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Dotnet
        uses: actions/setup-dotnet@v1
      - name: Restore, build, test
        run: |
          dotnet restore
          dotnet build
          dotnet test
  docker:
    runs-on: ubuntu-latest
    needs: tests
    if: startsWith(github.ref, 'refs/tags/v')
    name: Build and Publish docker image
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: ./HelloWorldHttp/Dockerfile
          push: true
          tags: |
            testingchneau/testing-github-actions:${{ steps.get_tag_name.outputs.VERSION }}
            latest
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    name: Deploy to own server
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: multiple command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          port: "23"
          script: |
            docker pull testingchneau/testing-github-actions:${{ steps.get_tag_name.outputs.VERSION }}
            docker rm -f hello_world || true
            docker run --restart=always -d --name=hello_world --hostname=hello_world -l="traefik.enable=true" -l='traefik.http.routers.hello.rule=Host(`${{ secrets.DEPLOY_HOST }}`)' -l="traefik.http.routers.hello.entrypoints=http" -l="traefik.http.services.hello.loadbalancer.server.port=5000" testingchneau/testing-github-actions:${{ steps.get_tag_name.outputs.VERSION }}
